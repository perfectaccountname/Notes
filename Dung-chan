/******************************************************************************
* DISCLAIMER

* This software is supplied by Renesas Electronics Corporation and is only 
* intended for use with Renesas products. No other uses are authorized.

* This software is owned by Renesas Electronics Corporation and is protected under 
* all applicable laws, including copyright laws.

* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES 
* REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, 
* INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
* PARTICULAR PURPOSE AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY 
* DISCLAIMED.

* TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS 
* ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
* FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES 
* FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS 
* AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

* Renesas reserves the right, without notice, to make changes to this 
* software and to discontinue the availability of this software.  
* By using this software, you agree to the additional terms and 
* conditions found by accessing the following link:
* http://www.renesas.com/disclaimer
******************************************************************************/
/* Copyright (C) 2015 Renesas Electronics Corporation. All rights reserved.  */
/******************************************************************************	
* File Name    : main.c
* Version      : 1.00
* Device(s)    : 
* Tool-Chain   : 
* H/W Platform : 
* Description  : 
******************************************************************************
* History : DD.MM.YYYY Version Description
*         : 01.07.2015 1.00    First Release
******************************************************************************/


/******************************************************************************
Includes   <System Includes> , "Project Includes"
******************************************************************************/
//#pragma interrupt INTIT timer_isr
#pragma sfr
#pragma interrupt INTIT r_it_interrupt
#include "r_macro.h"  /* System macro and standard type definition */
#include "r_spi_if.h" /* SPI driver interface */
#include "lcd.h"      /* LCD driver interface */    
#include "timer.h"    /* Timer driver interface */
#include "stdio.h"    /* Standard IO library: sprintf */
#include "Glyph_API.h" 
#include "string.h"
/******************************************************************************
Typedef definitions
******************************************************************************/

/******************************************************************************
Macro definitions
******************************************************************************/

/******************************************************************************
Imported global variables and functions (from other files)
******************************************************************************/

/******************************************************************************
Exported global variables and functions (to be accessed by other files)
******************************************************************************/

/******************************************************************************
Private global variables and functions
******************************************************************************/
void r_main_userinit(void);
uint8_t chatter(void);
void check_sw(uint8_t sw);
void check_stage(void);
void update_time(void);
void display_time(time_t *mtime);
void display_records (int i,char *p);
void data_convert (data_type data,char *p);
void Wait1MiliSecond(void);
time_t p_time;
unsigned int second=0;
uint8_t pause_flag=1;
uint8_t count_flag=0;
uint8_t record_flag=0;
uint8_t mode_change=0;
uint8_t time_change=0;
uint8_t display_record=0;
uint8_t temp=0;
uint8_t sw=0;
uint8_t stage=1;
uint8_t store=0;
int i=0;
unsigned int centisecond=0;
unsigned int number=0;
data_type data[20];
char string_clock[13];
char string_time[13];
unsigned int datanumber=0;
unsigned int count_record=0;


/******************************************************************************
* Function Name: main
* Description  : Main program
* Arguments    : none
* Return Value : none
******************************************************************************/

void main(void)
{
	/* Local time structure to temporary store the global time */
	int j=0,i=2;
	/* Clear LCD display */
	r_main_userinit();
	timer_init();
	
	ClearLCD();

	/* Print message to LCD */
	DisplayLCD(LCD_LINE1,(uint8_t*)"pausing...");
	DisplayLCD(LCD_LINE2+3,(uint8_t*)"00:00:00");

	/* Initialize external interrupt for switches */

	/* Initialize timer driver */

	/* Main loop - Infinite loop */

	while (1) 
	{
		sw=chatter();
		check_sw(sw);
		check_stage();
		if(time_change==1)
		{	
			display_time(&p_time);
			time_change=0;
		}
		if(display_record==1)
		{
			//convert_clock(centisecond,&string_clock);
			//DisplayLCD(LCD_LINE5,string_clock);
			j=number;
			for (j=number;j<=datanumber;j++)
			{
				if (i<8)
				{
					
					if(data[j].data!=0)
					{
					data_convert(data[j],&string_time);
					if((i>=2)&&(i<=7))
					display_records(i,&string_time);
					i++;
					}
					
	
			
				}
			}
			i=2;
			display_record=0;
		}
	}
}

/******************************************************************************
* Function Name: r_main_userinit
* Description  : User initialization routine
* Arguments    : none
* Return Value : none
******************************************************************************/
void r_main_userinit(void)
{
	uint16_t i;
	T_glyphError  result;
	T_glyphHandle hlcd;

	/* Enable interrupt */
	EI();

	/* Output a logic LOW level to external reset pin*/
	P13_bit.no0 = 0;
	for (i = 0; i < 1000; i++)
	{
		NOP();
	}

	/* Generate a raising edge by ouput HIGH logic level to external reset pin */
	P13_bit.no0 = 1;
	for (i = 0; i < 1000; i++)
	{
		NOP();
	}

	/* Output a logic LOW level to external reset pin, the reset is completed */
	P13_bit.no0 = 0;
	
	/* Initialize SPI channel used for LCD */
	R_SPI_Init(SPI_LCD_CHANNEL);
	
	/* Initialize Chip-Select pin for LCD-SPI: P145 (Port 14, pin 5) */
	R_SPI_SslInit(
		SPI_SSL_LCD,             /* SPI_SSL_LCD is the index defined in lcd.h */
		(unsigned char *)&P14,   /* Select Port register */
		(unsigned char *)&PM14,  /* Select Port mode register */
		5,                       /* Select pin index in the port */
		0,                       /* Configure CS pin active state, 0 means active LOW level  */
		0                        /* Configure CS pin active mode, 0 means active per transfer */
	);
	result = GlyphOpen (&hlcd, 0);        /* Open the Glyph API */
	result = GlyphNormalScreen(hlcd);   /* Sets up the normal LCD Screen */
	result =GlyphClearScreen(hlcd);       /* Clears the LCD Screen */
	/* Set writing position to (0, 0) */
	/* Initialize LCD driver */
	InitialiseLCD();	
}

/******************************************************************************
* Function Name: chatter
* Description  : Detect falling edge and remove chattering, return which switch is pressed
* Arguments    : None
* Return Value : sw
******************************************************************************/
uint8_t chatter(void){
	uint8_t current_data = 0;
	static uint8_t predata =0x7,outdata = 0x7,lastout = 0x7;//data=0x7 when switch is not pressed
	static int match_time1 = 0;
	lastout = outdata;
	current_data=(uint8_t)((P7&0x70)>>4);
	if(current_data!=predata)
	{
		match_time1=0;
		predata=current_data;
	}
	else
	{
		match_time1++;
		if(match_time1>=260)
		{	
			match_time1=0;
			outdata=current_data;
			if(outdata==2&&lastout!=2)
			{	lastout=7;
			}
		}
	}
	return ((outdata ^ lastout)&((~outdata)&0x07));//detect falling edge
}

/******************************************************************************
* Function Name: check_sw
* Description  : check which switch is pressed and check switch's fuction
* Arguments    : uint8_t sw
* Return Value : none
******************************************************************************/
void check_sw(uint8_t sw)
{
	switch(sw)
	{
		case 0:
			break;
			
		/*switch 1 is pressed*/
		case 4: 
			if(count_record!=0)
			{	
				if(number==1)
				{
					stage=4;
					mode_change=1;
				}
				else
				{	ClearLCD();
					if(stage!=1&&pause_flag==0)
					stage=2;
					else 
					{stage=0;
					DisplayLCD(LCD_LINE1,(uint8_t*)"pausing");
					}
					number--;
					display_record=1;
					mode_change=1;
					time_change=1;
				}
				break;
			}
			else
			{
				stage=3;
				mode_change=1;
				break;
			}
			break;

		/*switch 2 is pressed*/
		case 1:
			if(count_record!=0)
			{	
				if(number<(datanumber-1))
				{
					ClearLCD();
					if(stage!=1&&pause_flag==0)
					stage=2;
					else 
					{
					stage=0;
					DisplayLCD(LCD_LINE1,(uint8_t*)"pausing");
					}
					number++;
					display_record=1; 
					mode_change=1;
					time_change=1;
					break;
				}
				else
				{
					//store=stage;
					stage=5;
					mode_change=1;
					break;
				}
			}
			else
			{
				stage=3;
				mode_change=1;
				break;
			}
			break;
			

		/*switch 3 is pressed*/
		case 2:
			if(pause_flag==1)//stage==1)
			{
				stage=2;
				pause_flag=0;
				count_flag=1;
				mode_change=1;
				timer_start();
				break;
			}
			else
			{
				if((datanumber<20))
				{
					data[datanumber].data=centisecond;
					data[datanumber].datano=datanumber;
					datanumber++;
					//number++;
					count_record++;
					display_record=1;
					break;
				}
				else
				{
					data[datanumber-(20)].data=centisecond;
					data[datanumber-(20)].datano=datanumber;
					datanumber++;
					i++;
					count_record++;
					display_record=1;
					break;
				}
					
			}
			break;
		/* both switch 1 and 2 are pressed*/
		case 5:
			if(stage==0&&pause_flag==0)
			{	
				pause_flag=1;
				count_flag=0;
				stage=1;
				mode_change=1;
				timer_stop();
			}
			else if(stage==0&&pause_flag==1)
			{
				stage=1;
				ClearLCD();
				centisecond=0;
				time_change=1;
				mode_change=1;
				datanumber=0;
				number=0;
				count_record=0;
				timer_stop();
			}
			break;
		}
}

/******************************************************************************
* Function Name: check_stage
* Description  : Check mode is changed or not and display current mode
* Arguments    : none
* Return Value : count_flag
******************************************************************************/
void check_stage(void){
	static uint8_t count_flag=0;
	if(mode_change==1)
	{
		switch(stage)
		{
			default:
				break;
			case 1:	
				DisplayLCD(LCD_LINE1,(uint8_t*)"pausing");
				pause_flag=1;
				count_flag=0;
				store=stage;
				//stage=
				break;
			case 2:
				DisplayLCD(LCD_LINE1,(uint8_t*)"running");
				pause_flag=0;
				count_flag=1;
				store=stage;
				stage=0;
				break;
			case 3:
				if(centisecond!=0)
				{
				DisplayLCD(LCD_LINE1,(uint8_t*)"No record");
				temp=1;
				stage=0;
				}
				break;
			case 4:
				DisplayLCD(LCD_LINE1,(uint8_t*)"First record");
				temp=1;
				//store=stage;
				stage=0;
				display_record=1;
				break;
			case 5:
				DisplayLCD(LCD_LINE1,(uint8_t*)"Last record");
				temp=1;
				//store=stage;
				stage=0;
				display_record=1;
				break;		
				
		}
		mode_change=0;
	}
}

/******************************************************************************
* Function Name: update_time
* Description  : time count when in counting mode and second >0 
* Arguments    : none
* Return Value : none
******************************************************************************/
void update_time(void){
	static int j=0;
	if(second>0)
	{
		j++;
		Wait1MiliSecond();
		if(j>=1000)
		{
			j=0;
			second--;
			time_change=1;
		}
	}

}
__interrupt static void r_it_interrupt(void)
{
    /* Start user code. Do not edit comment generated here */
    //j++;
    //if(j==10)
    static unsigned int k=0;
    if(temp==1)
   	{
    		k=k+10;
		if(k>=200)
		{
			k=0;
			stage=store;
			mode_change=1;
			temp=0;
		}
	}
	
    centisecond=centisecond+10;
    time_change=1;
    
    /* End user code. Do not edit comment generated here */
} 

/******************************************************************************
* Function Name: display_time
* Description  : display time on LCD when time change
* Arguments    : time_t *mtime
* Return Value : none
******************************************************************************/
void display_time(time_t *mtime){
	char string_time1[8];
	mtime->centisecond=(uint8_t)(centisecond%100);
	mtime->second=(uint8_t)((centisecond/100)%60);
	mtime->minute=(uint8_t)((centisecond/100)/60);
	sprintf(string_time1, "%0.2d:%0.2d:%0.2d",mtime->minute,mtime->second,mtime->centisecond);
	DisplayLCD(LCD_LINE2+3,(uint8_t*)string_time1);
	
	/*when second down to 0 return to setting mode*/
	//if(second==0)
	//{
	//	stage=1;
	//	mode_change=1;
	//}
}
void data_convert (data_type data,char *p)
{
	unsigned int centisecond,second,minute,no;
	centisecond=(data.data%100);	
	second=(data.data/100)%60;
	minute=(data.data/100)/60;
	no=data.datano;
	sprintf(string_time, "#%0.2d %0.2d:%0.2d:%0.2d",no,minute,second,centisecond);
}
void display_records (int i,char *p)
{
	T_glyphError  result;
	T_glyphHandle hlcd;
	int a;
	switch (i)
	{
	case 0:
		a=LCD_LINE1;
		break;
	case 1:
		a=LCD_LINE2;
		break;
	case 2:
		a=LCD_LINE3;
		break;
	case 3:
		a=LCD_LINE4;
		break;
	case 4:
		a=LCD_LINE5;
		break;
	case 5:
		a=LCD_LINE6;
		break;
	case 6:
		a=LCD_LINE7;
		break;
	case 7:
		a=LCD_LINE8;
		break;
	}
	DisplayLCD(a,p);
}
/******************************************************************************
End of file
******************************************************************************/
