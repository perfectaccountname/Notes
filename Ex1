LIST
LIST is a set of jointed data elements.
One element has data and the pointer to next element.
Sample program 9 show you how to use LIST structure.
Data : banana
Pointer : p2
Pointer : p1
Data : orange
Pointer : p3
Data : apple
Pointer : NULL
Last pointer is NULL
(1)Creates the LIST from array data
(2)Print the LIST
(3)Delete the LIST.
Sample data are fruit names.
There are 3 fruits in the LIST.
struct leaf {
char data[16]; /* string data */
struct leaf *next; /* pointer to next*/
};
One element of LIST
element 1
element 2
element 3
Top
0 apple
1 orange
2 banana
Array data
LIST structure
Sample program 9 action

struct leaf {
char data[16]; /* string data */
struct leaf *next; /* pointer to the next leaf */
};
struct leaf *addLeaf(char*, struct leaf *);
void printLeaves(struct leaf *p);
void freeLeaves(struct leaf *p);
int main(void)
{
struct leaf *top; /* top of the leaves */
char *fruits[3] = {"apple", "orange", "banana" } ;
top = NULL;
top = addLeaf(fruits[0], top);
top = addLeaf(fruits[1], top);
top = addLeaf(fruits[2], top);
printLeaves(top); /* print elements*/
freeLeaves(top); /* delete all elements */
}
void printLeaves(struct leaf *pL)
{
while (pL != NULL) {
printf("%s\n", pL->data);
pL = pL->next;
}
}
struct leaf *addLeaf(char *data, struct leaf *top)
{
struct leaf *pL;
pL = (struct leaf*) malloc(sizeof(struct leaf));
strcpy(pL->data, data);
/* change pointer to the top */
pL->next = top; /* Old top is new leaf's next */
top = pL;/* New top is new leaf's address */
return top;
}
void freeLeaves(struct leaf *pL)
{
struct leaf *pLnext;
while (pL != NULL) {
pLnext = pL->next;
free(pL);
pL = pLnext;
}
}

List create step (addLeaf)
Pointer : p3
Data : apple
Pointer : NULL
element 3
Top
Pointer : NULL
Top
Pointer : p2
Data : orange
Pointer : p3
Data : apple
Pointer : NULL
element 2
element 3
Top
Data : banana
Pointer : p2
Pointer : p1
Data : orange
Pointer : p3
Data : apple
Pointer : NULL


Regarding the sample program 9, add following function.
(1) After creating 3 initial data (prepared in program 9),
insert element 4 after element 1. (element 4 data is "grape")
[Expand exercise]
(2) Get “insert number” and “fruit name” by "scanf", and insert the element to the LIST.

Add new element to the LIST
LIST structure is more easy to add element than array.
Data : banana
Pointer : p2
Pointer : p1
Data : orange
Pointer : p3
Data : apple
Pointer : NULL
(1)Create element4 data.
(2)Copy element1's next pointer to element4's next pointer.
(3)Set element4 's address to the element1's next pointer.

Exercise 4-2
Regarding the sample program 9, add following function.
(1) After create initial 3 data (prepared in program 9),
remove element 2.
[Expand exercise]
(2) Get “remove number” by "scanf", and remove the element from the LIST

LIST structure is more easy to remove element than array.
Data : banana
Pointer : p2
Pointer : p1
Data : orange
Pointer : p3
Data : apple
Pointer : NULL
How to remove element 2
(1) Copy element2's next pointer to element1's next pointer.
(2) Free memory the data of element 2.
element 1
element 2
element 3
Free
Top
p3
