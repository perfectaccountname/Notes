/******************************************************************************
* DISCLAIMER

* This software is supplied by Renesas Electronics Corporation and is only 
* intended for use with Renesas products. No other uses are authorized.

* This software is owned by Renesas Electronics Corporation and is protected under 
* all applicable laws, including copyright laws.

* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES 
* REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, 
* INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
* PARTICULAR PURPOSE AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY 
* DISCLAIMED.

* TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS 
* ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
* FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES 
* FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS 
* AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

* Renesas reserves the right, without notice, to make changes to this 
* software and to discontinue the availability of this software.  
* By using this software, you agree to the additional terms and 
* conditions found by accessing the following link:
* http://www.renesas.com/disclaimer
******************************************************************************/
/* Copyright (C) 2015 Renesas Electronics Corporation. All rights reserved.  */
/******************************************************************************	
* File Name    : main.c
* Version      : 1.00
* Device(s)    : 
* Tool-Chain   : 
* H/W Platform : 
* Description  : 
******************************************************************************
* History : DD.MM.YYYY Version Description
*         : 03.07.2015 1.00    First Release
******************************************************************************/


/******************************************************************************
Includes   <System Includes> , "Project Includes"
******************************************************************************/
#include "r_macro.h"  /* System macro and standard type definition */
#include "r_spi_if.h" /* SPI driver interface */
#include "lcd.h"      /* LCD driver interface */
#include "Port.h"
#include <string.h>
#include "ChatDel.h"
#include "checkswitch.h"

/******************************************************************************
Typedef definitions
******************************************************************************/
volatile int G_elapsedTime = 0;   // Timer Counter
/******************************************************************************
Macro definitions
******************************************************************************/
#define SETTING 0 // Setting...
#define RUNNING 1 // Running...
#define PAUSED 2 // Paused...

#define SWT1 0x40
#define SWT2 0x10
#define SWT3 0x20

#define MAX 20
/******************************************************************************
Imported global variables and functions (from other files)
******************************************************************************/

/******************************************************************************
Exported global variables and functions (to be accessed by other files)
******************************************************************************/
int second = 0;
int minute = 0;
char * string_shown_on_lcd[10];
unsigned int match = 0;
unsigned int prev = 0x70;
unsigned int read = 0x70;
unsigned int final = 0;
unsigned int prevfinal = 0;
unsigned int button = 0;
uint8_t state = SETTING;
/******************************************************************************
Private global variables and functions
******************************************************************************/
void r_main_userinit(void);
void checkswitch(void);
void wait(int mode);

typedef <Element's type> El_type;
typedef struct Queue
{
El_type el[MAX];
int front;
int rear;
} Queue;

/******************************************************************************
* Function Name: main
* Description  : Main program
* Arguments    : none
* Return Value : none
******************************************************************************/
void main(void)
{

	/* Initialize user system */
	r_main_userinit();

	/* Clear LCD display */
	ClearLCD();

	/* Print message to the first line of LCD */
	//DisplayLCD(LCD_LINE1, (uint8_t *)"Hello World!");

	DisplayLCD(LCD_LINE1, "Setting...");
	sprintf(string_shown_on_lcd, "%0.2d:%0.2d", minute, second);
	DisplayLCD(LCD_LINE2, string_shown_on_lcd);

	/* Main loop - Infinite loop */
	while (1)
	{
		checkswitch();
		if (state == RUNNING)
		{
			if (second == 0 && minute == 0)
			{
				DisplayLCD(LCD_LINE1, "Setting...");
				state = SETTING; // Setting
			}
			else
			{		
				wait(0);
				G_elapsedTime++;
				if (G_elapsedTime >= 1000)
				{
		                second--;
		                G_elapsedTime = G_elapsedTime - 1000;
				
				if (second < 0)
				{
					second = 59;
					minute--;
					if (minute < 0)
					{
						minute = 59;
					}
				}				
		                sprintf(string_shown_on_lcd, "%0.2d:%0.2d", minute, second);
		                DisplayLCD(LCD_LINE2, string_shown_on_lcd);
				}
			}
		}
	}
}

/******************************************************************************
* Function Name: wait
* Description  : User initialization routine
* Arguments    : C timer or Assembly
* Return Value : none
******************************************************************************/
void wait(int mode)
{
	if (mode == 1)
	{
		unsigned long i = 2200;
		while (i!=0) i--;
	}
	else
	{
		Wait1MiliSecond();
	}
}

/******************************************************************************
* Function Name: r_main_userinit
* Description  : User initialization routine
* Arguments    : none
* Return Value : none
******************************************************************************/
void r_main_userinit(void)
{
	uint16_t i;

	/* Enable interrupt */
	EI();

	/* Output a logic LOW level to external reset pin*/
	P13_bit.no0 = 0;
	for (i = 0; i < 1000; i++)
	{
		NOP();
	}

	/* Generate a raising edge by ouput HIGH logic level to external reset pin */
	P13_bit.no0 = 1;
	for (i = 0; i < 1000; i++)
	{
		NOP();
	}

	/* Output a logic LOW level to external reset pin, the reset is completed */
	P13_bit.no0 = 0;

	/* Initialize SPI channel used for LCD */
	R_SPI_Init(SPI_LCD_CHANNEL);

	/* Initialize Chip-Select pin for LCD-SPI: P145 (Port 14, pin 5) */
	R_SPI_SslInit(
		SPI_SSL_LCD,             /* SPI_SSL_LCD is the index defined in lcd.h */
		(unsigned char *)&P14,   /* Select Port register */
		(unsigned char *)&PM14,  /* Select Port mode register */
		5,                       /* Select pin index in the port */
		0,                       /* Configure CS pin active state, 0 means active LOW level  */
		0                        /* Configure CS pin active mode, 0 means active per transfer */
	);

	/* Initialize LCD driver */
	InitialiseLCD();
}
/******************************************************************************
* Function Name: Eltype *initQ
* Description  : Initialize Queue
* Arguments    : none
* Return Value : front and rear pointers of Queue
******************************************************************************/
Eltype *initQ(Queue *q)
{
q = (Queue *)malloc(sizeof(Queue));
if(q!= NULL) 
{
  q->front = -1;
  q->rear = -1;
}
return q;
}

/******************************************************************************
* Function Name: int empty_queue
* Description  : Check if a queue is empty
* Arguments    : none
* Return Value : front pointer
******************************************************************************/
int empty_queue(queue q)
{
DisplayLCD(LCD_LINE2, "No record");
return q.front==-1;
}

/******************************************************************************
* Function Name: enqueue
* Description  : Add a new element
* Arguments    : none
* Return Value : none
******************************************************************************/
void enqueue(elementtype x,queue *q)
{
if(!full_queue(*q))
{
if(empty_queue(*q))q->front=0;
q->rear=(q->rear+1)%maxlength;
q->data[q->rear]=x;    
}
else printf("Full!");
}

/******************************************************************************
* Function Name: dequeue
* Description  : Delete an element
* Arguments    : pointer
* Return Value : none
******************************************************************************/
void dequeue(queue *q)
{
if(!empty_queue(*q))
{
if(q->front==q->rear)makenull_queue(q);
else q->front=(q->front+1)%maxlength;
}
else printf("Empty!");
}

/******************************************************************************
* Function Name: r_main_userinit
* Description  : User initialization routine
* Arguments    : none
* Return Value : none
******************************************************************************/
/******************************************************************************
End of file
******************************************************************************/
